clear all;
close all;
addpath(genpath(pwd));
import SLEP.*;
run mexC.m;
A = importdata('SAS saved as spss.csv');
%save IC_SP.mat A;
%load('IC_SP.mat');
data_double = A.data;
data_name = A.textdata(1,5:end);
%var = char(data_name); 

% to pre-process whole data set
% to get missing ratios of all variables
for i = 1:size(data_double,2)
    zeros(1,i) = sum(isnan(data_double(:,i)))/size(data_double,1);
end

% to remove variables with 75% or more missing data and get new data set data_double_new with 1688 variables
k = 1;
for i = 1:size(data_double, 2)
        if zeros(1,i) < 0.75
            data_name_new(1, k) = data_name(1,i); % to get the subset of variable names without respondents name
            data_double_new(:, k) = data_double(:,i);
            %data_double_new(k).name = data_name(1, i);
            %data_double_new(k).value = data_double(:,i);
            k = k + 1;
        end
end

% to impute missing data using the nearest neighbor method
temp = transpose(data_double_new);
temp_imputed = knnimpute(temp);
data_imputed = transpose(temp_imputed);

% to standardize the variables
data_s = zscore(data_imputed);

% to drop the last 6 columns(unknown meaning)
data_s(:, 1683:end) = [];
data_imputed(:, 1683:end) = []; % un-standardized data
data_name_new(:, 1683:end) = [];

% to subset data set by constructs-standardized
for i = 1: length(data_name_new)
    construct(i). name = data_name_new{1,i}(4:end);
    construct(i). value = data_s(:,i);
end

% to subset data set by constructs-unstandardized
for i = 1: length(data_name_new)
    construct_us(i). name = data_name_new{1,i}(4:end);
    construct_us(i). value = data_imputed(:,i);
end

% to sort the construct by names
[unused, order] = sortrows(strvcat(construct(:).name));
construct_sorted = construct(order); 

k = 1;
i = 1;
j = 2;
%subconstruct{1} = construct(1).value;
%subconstruct_name{1} = construct(1).name;
% for i = 1: length(data_name_new)
%     for j = 1: length(data_name_new)
%         if(strncmp(construct(i).name, construct(j).name, 5) == 1)
%             subconstruct(k).name = construct(j).name;
%             subconstruct(k).value = construct(j).value;
%          end
%         j = j + 1;
%     end
%     i = i +1;
% end
subconstruct(1).name = construct_sorted(1).name(1:5);
subconstruct(1).value = construct_sorted(1).value;
% group data set into constructs by 4th~7th characters in varable names 
while(i <= length(data_name_new) && j <= length(data_name_new))
    if(strncmp(construct_sorted(i).name, construct_sorted(j).name, 4) == 1)
        subconstruct(k).name = construct_sorted(j).name(1:4);
        subconstruct(k).value = [subconstruct(k).value, construct_sorted(j).value];
    else
        i = j;
        k = k + 1;
        subconstruct(k).name = construct_sorted(i).name(1:4);
        subconstruct(k).value = construct_sorted(i).value;
    end
    j = j + 1;
end

%*********************************
% to conduct PCA using default arguments
%*********************************
for i = 1: length(subconstruct)
     [coeff{i},score{i},latent{i},tsquared{i},explained{i},mu{i}] = pca(subconstruct(i).value);
end

%*************************************
%plot criteron variables to determin cutoff values
%*************************************

% for innovation dimension
% to find column NRPSN10 and plot histogram(here un-standardized data are used, same to other categories)
for i = 1: length(construct_us)
    if(construct_us(i).name == 'nrpsn10')
        innovation = construct_us(i).value;
    end
end
% to group all records to high and low innovation categories (median, using standardized data,same to other categories)
m = 1;
n = 1;
for i = 1: length(innovation)
    if (innovation(i) >= median(innovation))
        %innovation_high(1,i) = construct_us(i).name;
        for j = 1:length(construct)
           innovation_high(m,j) = construct(j).value(i);
        end
        m = m + 1;
    else
        for j = 1:length(construct)
             innovation_low(n,j) = construct(j).value(i);
        end
        n = n + 1;
    end
end      

% for quality dimension 
% to find column GRCPN02 and plot histogram
for i = 1:length(construct_us)
    if(construct_us(i).name == 'grcpn02')
        quality = construct_us(i).value;
    end
end
% to group all records to high and low quality categories (median)
m = 1;
n = 1;
for i = 1: length(quality)
    if (quality(i) >= median(quality))
       for j = 1:length(construct)
           quality_high(m,j) = construct(j).value(i);
        end
        m = m + 1;
    else
        for j = 1:length(construct)
             quality_low(n,j) = construct(j).value(i);
        end
        n = n + 1;
    end
end      

% for flexibility dimension
% to find column GRCPN05 and plot histogram
for i = 1:length(construct_us)
    if(construct_us(i).name == 'grcpn05')
        flexibility = construct_us(i).value;
    end
end
% to group all records to high and low flexibility categories (median)
m = 1;
n = 1;
for i = 1: length(quality)
    if (flexibility(i) >= median(flexibility))
       for j = 1:length(construct)
           flexibility_high(m,j) = construct(j).value(i);
        end
        m = m + 1;
    else
        for j = 1:length(construct)
             flexibility_low(n,j) = construct(j).value(i);
        end
        n = n + 1;
    end
end       

% for speed dimension
% to find column GRCPN04  and plot histogram
for i = 1:length(construct_us)
    if(construct_us(i).name == 'grcpn04')
        speed = construct_us(i).value;
    end
end
% to group all records to high and low speed categories (median)
m = 1;
n = 1;
for i = 1: length(speed)
    if (speed(i) >= median(speed))
       for j = 1:length(construct)
           speed_high(m,j) = construct(j).value(i);
        end
        m = m + 1;
    else
        for j = 1:length(construct)
             speed_low(n,j) = construct(j).value(i);
        end
        n = n + 1;
    end
end       

% for cost dimension
% to find column GRADN00 and GRADN03   and plot histogram of GRADN00 divided by GRADN03 
for i = 1:length(construct_us)
    if(construct_us(i).name == 'gradn00')
        cost_numerator = construct_us(i).value;
    end
end
for i = 1:length(construct_us)
    if(construct_us(i).name == 'gradn03')
        cost_denominator  = construct_us(i).value;
    end
end

for i = 1: length(cost_numerator)
    cost(i) = cost_numerator(i)/cost_denominator(i);
end
% to exclude the outlier(s)
k = 1;
for i = 1:length(cost_numerator)
    if(cost(i) <=20)
    cost_noutlier(k) = cost(i);
    k = k +1;
    end
end
% to group all records to high and low cost categories (median)
m = 1;
n = 1;
for i = 1: length(cost_noutlier)
    if (cost_noutlier(i) >= median( cost_noutlier))
         for j = 1:length(construct)
                cost_noutlier_high(m,j) =  construct(j).value(i);
         end
        m = m + 1;
    else
        for j = 1:length(construct)
             cost_noutlier_low(n,j) =  construct(j).value(i);
        end
        n = n + 1;
    end
end      


% for i = 1:length(cost)
%     cost_s(i)=(cost(i)-mean(cost))/std(cost);
% end

% plot histograms for criteria variables
% figure % create new figure
% subplot(3,2,1) % first subplot
% hist(innovation);
% title('Frequency of Innovation(NRPSN10)');
% subplot(3,2,2) % second subplot
% hist(quality);
% title('Frequency of Quality(GRCPN02)');
% subplot(3,2,3) % third subplot
% hist(flexibility);
% title('Frequency of Flexibility(GRCPN05)');
% subplot(3,2,4) % fourth subplot
% hist(speed);
% title('Frequency of Speed(GRCPN04)');
% subplot(3,2,5) % fifth subplot
% hist(cost_noutlier);
% title('Frequency of Cost(GRADN00/GRADN03)');

%***************************************
% SICE analysis based on original variables
%***************************************

% to get covariance matrix of 10 subsets
cov_innovation_high = cov(innovation_high);
cov_innovation_low = cov(innovation_low);

cov_quality_high = cov(quality_high);
cov_quality_low = cov(quality_low);

cov_flexibility_high = cov(flexibility_high);
cov_flexibility_low = cov(flexibility_low);

cov_speed_high = cov(speed_high);
cov_speed_low = cov(speed_low);

cov_cost_high = cov(cost_noutlier_high);
cov_cost_low = cov(cost_noutlier_low);

% to get SICE outcome 
time0 = datestr(now); % to record running duration
SICE_innovation_high  = sparseInverseCovariance(cov_innovation_high, 0.567, []);
time1= datestr(now);
SICE_innovation_low  = sparseInverseCovariance(cov_innovation_low, 0.567, []);
time2 = datestr(now);
SICE_quality_high  = sparseInverseCovariance(cov_quality_high, 0.567, []);
time3 = datestr(now);
SICE_quality_low  = sparseInverseCovariance(cov_quality_low, 0.567, []);
time4 = datestr(now);
SICE_flexibility_high  = sparseInverseCovariance(cov_flexibility_high, 0.567, []);
time5 = datestr(now);
SICE_flexibility_low  = sparseInverseCovariance(cov_flexibility_low, 0.567, []);
time6 = datestr(now);
SICE_speed_high  = sparseInverseCovariance(cov_speed_high, 0.567, []);
time7 = datestr(now);
SICE_speed_low  = sparseInverseCovariance(cov_speed_low, 0.567, []);
time8 = datestr(now);
SICE_cost_high  = sparseInverseCovariance(cov_cost_high, 0.567, []);
time9 = datestr(now);
SICE_cost_low  = sparseInverseCovariance(cov_cost_low, 0.567, []);
time10 = datestr(now);

% illustrate of SICE outcome
figure;
subplot(1,2,1);
spy(SICE_innovation_high);
title('Estimated Sparse Inverse Covariance Matrix of High-Innovation Records');
subplot(1,2,2);
spy(SICE_innovation_low);
title('Estimated Sparse Inverse Covariance Matrix of Low-Innovation Records');

figure;
subplot(1,2,1);
spy(SICE_quality_high);
title('Estimated Sparse Inverse Covariance Matrix of High-Quality Records');
subplot(1,2,2);
spy(SICE_quality_low);
title('Estimated Sparse Inverse Covariance Matrix of Low-Quality Records');

figure;
subplot(1,2,1);
spy(SICE_flexibility_high);
title('Estimated Sparse Inverse Covariance Matrix of High-Flexibility Records');
subplot(1,2,2);
spy(SICE_flexibility_low);
title('Estimated Sparse Inverse Covariance Matrix of Low-Flexibility Records');

figure;
subplot(1,2,1);
spy(SICE_speed_high);
title('Estimated Sparse Inverse Covariance Matrix of High-Speed Records');
subplot(1,2,2);
spy(SICE_speed_low);
title('Estimated Sparse Inverse Covariance Matrix of Low-Speed Records');

figure;
subplot(1,2,1);
spy(SICE_cost_high);
title('Estimated Sparse Inverse Covariance Matrix of High-Cost Records');
subplot(1,2,2);
spy(SICE_cost_low);
title('Estimated Sparse Inverse Covariance Matrix of Low-Cost Records');

% to create network of SICE outcome
BGobj_innovation_high = biograph(SICE_innovation_high);
BGobj_innovation_low = biograph(SICE_innovation_high);
BGobj_quality_high = biograph(SICE_quality_high);
BGobj_quality_low = biograph(SICE_quality_low);
BGobj_flexibility_high = biograph(SICE_flexibility_high);
BGobj_flexibility_low = biograph(SICE_flexibility_low);
BGobj_speed_high = biograph(SICE_speed_high);
BGobj_speed_low = biograph(SICE_speed_low);
BGobj_cost_high = biograph(SICE_cost_high);
BGobj_cost_low = biograph(SICE_cost_low);

% to view network of SICE outcome
%view(BGobj_innovation_high);
%view(BGobj_innovation_low);
%view(BGobj_quality_high);
%view(BGobj_quality_low);
%view(BGobj_flexibility_high);
%view(BGobj_flexibility_low);
%view(BGobj_speed_high);
%view(BGobj_speed_low);
%view(BGobj_cost_high);
%view(BGobj_cost_low);

%********************************************************
% SICE analysis based on principal components (first PC of each construct)
%********************************************************

% to get all the first PCs of 125 constructs and form a new dataset pcadata
for i = 1: length(score)
    pcadata(:,i) =score{1,i}(:,1);
end

% to get covariance matrix of 10 subsets
cov_pcadata = cov(pcadata);
% to get SICE outcome 
SICE_pcadata  = sparseInverseCovariance(cov_pcadata, 0.567, []);
% to illustrate SICE outcome 
spy(SICE_pcadata);

%*************************************************
%to figure out the most strong relation between original variables
%innovation, quality, flexibility, speed, cost
%*************************************************

% to extract maximal values (need to exclude values on diagonals) in SICE outcome
% first extract non-zero values (as a column vector) from SICE outcome
for i = 1: length(SICE_innovation_high)
    for j = 1: length(SICE_innovation_high)
        if(i ~= j)  %exclude values on diagonal
            SICE_innovation_high_zerodiagonal(i,j) = SICE_innovation_high(i,j);
        else
            SICE_innovation_high_zerodiagonal(i,j) = 0;
        end        
    end
  end
nonzeros_innovation_high = nonzeros(SICE_innovation_high_zerodiagonal);

for i = 1: length(SICE_innovation_low)
    for j = 1: length(SICE_innovation_low)
        if(i ~= j)  %exclude values on diagonal
            SICE_innovation_low_zerodiagonal(i,j) = SICE_innovation_low(i,j);
        else
            SICE_innovation_low_zerodiagonal(i,j) = 0;
        end        
    end
  end
nonzeros_innovation_low = nonzeros(SICE_innovation_low_zerodiagonal);

for i = 1: length(SICE_quality_high)
    for j = 1: length(SICE_quality_high)
        if(i ~= j)  %exclude values on diagonal
            SICE_quality_high_zerodiagonal(i,j) = SICE_quality_high(i,j);
        else
            SICE_quality_high_zerodiagonal(i,j) = 0;
        end        
    end
  end
nonzeros_quality_high = nonzeros(SICE_quality_high_zerodiagonal);

for i = 1: length(SICE_quality_low)
    for j = 1: length(SICE_quality_low)
        if(i ~= j)  %exclude values on diagonal
            SICE_quality_low_zerodiagonal(i,j) = SICE_quality_low(i,j);
        else
            SICE_quality_low_zerodiagonal(i,j) = 0;
        end        
    end
  end
nonzeros_quality_low = nonzeros(SICE_quality_low_zerodiagonal);

for i = 1: length(SICE_flexibility_high)
    for j = 1: length(SICE_flexibility_high)
        if(i ~= j)  %exclude values on diagonal
            SICE_flexibility_high_zerodiagonal(i,j) = SICE_flexibility_high(i,j);
        else
            SICE_flexibility_high_zerodiagonal(i,j) = 0;
        end        
    end
  end
nonzeros_flexibility_high = nonzeros(SICE_flexibility_high_zerodiagonal);

for i = 1: length(SICE_flexibility_low)
    for j = 1: length(SICE_flexibility_low)
        if(i ~= j)  %exclude values on diagonal
            SICE_flexibility_low_zerodiagonal(i,j) = SICE_flexibility_low(i,j);
        else
            SICE_flexibility_low_zerodiagonal(i,j) = 0;
        end        
    end
  end
nonzeros_flexibility_low = nonzeros(SICE_flexibility_low_zerodiagonal);

for i = 1: length(SICE_speed_high)
    for j = 1: length(SICE_speed_high)
        if(i ~= j)  %exclude values on diagonal
            SICE_speed_high_zerodiagonal(i,j) = SICE_speed_high(i,j);
        else
            SICE_speed_high_zerodiagonal(i,j) = 0;
        end        
    end
  end
nonzeros_speed_high = nonzeros(SICE_speed_high_zerodiagonal);

for i = 1: length(SICE_speed_low)
    for j = 1: length(SICE_speed_low)
        if(i ~= j)  %exclude values on diagonal
            SICE_speed_low_zerodiagonal(i,j) = SICE_speed_low(i,j);
        else
            SICE_speed_low_zerodiagonal(i,j) = 0;
        end        
    end
  end
nonzeros_speed_low = nonzeros(SICE_speed_low_zerodiagonal);

for i = 1: length(SICE_cost_high)
    for j = 1: length(SICE_cost_high)
        if(i ~= j)  %exclude values on diagonal
            SICE_cost_high_zerodiagonal(i,j) = SICE_cost_high(i,j);
        else
            SICE_cost_high_zerodiagonal(i,j) = 0;
        end        
    end
  end
nonzeros_cost_high = nonzeros(SICE_cost_high_zerodiagonal);

for i = 1: length(SICE_cost_low)
    for j = 1: length(SICE_cost_low)
        if(i ~= j)  %exclude values on diagonal
            SICE_cost_low_zerodiagonal(i,j) = SICE_cost_low(i,j);
        else
            SICE_cost_low_zerodiagonal(i,j) = 0;
        end        
    end
  end
nonzeros_cost_low = nonzeros(SICE_cost_low_zerodiagonal);

% to plot histograms for each non-zero column vector and figure out interested range
figure;
subplot(1,2,1);
hist(nonzeros_innovation_high);
title('Distribution of non-zero values of High-Innovation SICE Outcome');
subplot(1,2,2);
hist(nonzeros_innovation_low);
title('Distribution of non-zero values of Low-Innovation SICE Outcome');

figure;
subplot(1,2,1);
hist(nonzeros_quality_high);
title('Distribution of non-zero values of High-Quality SICE Outcome');
subplot(1,2,2);
hist(nonzeros_quality_low);
title('Distribution of non-zero values of Low-Quality SICE Outcome');

figure;
subplot(1,2,1);
hist(nonzeros_flexibility_high);
title('Distribution of non-zero values of High-Flexibility SICE Outcome');
subplot(1,2,2);
hist(nonzeros_flexibility_low);
title('Distribution of non-zero values of Low-Flexibility SICE Outcome');

figure;
subplot(1,2,1);
hist(nonzeros_speed_high);
title('Distribution of non-zero values of High-Speed SICE Outcome');
subplot(1,2,2);
hist(nonzeros_speed_low);
title('Distribution of non-zero values of Low-Speed SICE Outcome');

figure;
subplot(1,2,1);
hist(nonzeros_cost_high);
title('Distribution of non-zero values of High-Cost SICE Outcome');
subplot(1,2,2);
hist(nonzeros_cost_low);
title('Distribution of non-zero values of Low-Cost SICE Outcome');

% to extract variable pairs' names of SICE outcome >0.1
k = 1;
for i = 1: length(SICE_innovation_high)
    for j =  (i + 1): length(SICE_innovation_high)
        if(i ~= j)  %exclude values on diagonal
           if(abs(SICE_innovation_high (i,j)) >0.1)
               arc_innovation_high(k).var1 = data_name_new(i);
               arc_innovation_high(k).var2 = data_name_new(j);
               arc_innovation_high(k).value = SICE_innovation_high (i,j);
               k = k + 1;
        end
    end
  end
end

k = 1;
for i = 1: length(SICE_innovation_low)
    for j =  (i + 1): length(SICE_innovation_low)
        if(i ~= j)  %exclude values on diagonal
           if(abs(SICE_innovation_low (i,j) )>0.1)
               arc_innovation_low(k).var1 = data_name_new(i);
               arc_innovation_low(k).var2 = data_name_new(j);
               arc_innovation_low(k).value = SICE_innovation_low (i,j);
               k = k + 1;
        end
    end
  end
end
    

% PCA based on individual item level for whole data set
% % to conduct PCA1-default parameters / method
% [coeff_1,score_1,latent_1,tsquared_1,explained_1,mu_1] = pca(data_s);
% latent_1 (:,2) =  cumsum(latent_1)/sum(latent_1); % add cumsum ratio of variance explained
% 
% % to conducy PCA2-Alternating Least Squares-much slower
% [coeff_2,score_2,latent_2,tsquared_2,explained_2,mu_2] = pca(data_double_new, 'Algorithm','als');
% latent_2(:,2) =  cumsum(latent_2)/sum(latent_2); % add cumsum ratio of variance explained
% 
% % to conduct PCA3-default parameters / method, not centered
% [coeff_3,score_3,latent_3,tsquared_3,explained_3,mu_3] = pca(data_s, 'Centered','off');
% latent_3 (:,2) =  cumsum(latent_3)/sum(latent_3); % add cumsum ratio of variance explained
% 
% % to conduct PCA4-default parameters / method, rows = all
% [coeff_4,score_4,latent_4,tsquared_4,explained_4,mu_4] = pca(data_s, 'Rows','all');
% latent_4 (:,2) =  cumsum(latent_4)/sum(latent_4); % add cumsum ratio of variance explained
% 
% % to conduct PCA5-default parameters / method, requires 286 PCs
% [coeff_5,score_5,latent_5,tsquared_5,explained_5,mu_5] = pca(data_s, 'NumComponents',286);
% latent_5(:,2) =  cumsum(latent_5)/sum(latent_5); % add cumsum ratio of variance explained
% 
% % to conduct PCA6-Eigenvalue Decomposition 
% [coeff_6,score_6,latent_6,tsquared_6,explained_6,mu_6] = pca(data_s, 'Algorithm','eig');
% latent_6(:,2) =  cumsum(latent_6)/sum(latent_6); % add cumsum ratio of variance explained
% 
% % to conduct PCA7-Economy = Off 
% [coeff_7,score_7,latent_7,tsquared_7,explained_7,mu_7] = pca(data_s, 'Economy','Off');
% latent_7(:,2) =  cumsum(latent_7)/sum(latent_7); % add cumsum ratio of variance explained

% % try if PCA can handle vector variables
% field = {'field1', 'field2','field3', 'field4','field5', 'field6'};
% 
% for i = 1:197
%     new(i).value1 = data_s(i,1:5);
%     new(i).value2 = data_s(i,6:10);
%     new(i).value3 = data_s(i,11:15);
%     new(i).value4 = data_s(i,16:20);
%     new(i).value5 = data_s(i,21:25);
%     new(i).value6 = data_s(i,26:30);
%     end
